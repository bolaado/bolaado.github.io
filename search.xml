<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CDLL和WinDLL的区别</title>
      <link href="2021/02/06/CDLL%E5%92%8CWinDLL%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>2021/02/06/CDLL%E5%92%8CWinDLL%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="CDLL和WinDLL的区别"><a href="#CDLL和WinDLL的区别" class="headerlink" title="CDLL和WinDLL的区别"></a>CDLL和WinDLL的区别</h1><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>Python要调用C语言或者C++写的动态连接库，要用到<code>ctypes</code>库<br>而<code>ctypes</code>库其实背后做了很多，它提供了三个easy载入动态连接库的对象：<code>cdll</code>、<code>windll</code>和<code>oledll</code><br>通过访问这三个对象的属性，就能够调用动态连接库的函数了<br><font color="pink">其中</font></p><ul><li><code>cdll</code>主要用来载入C语言调用方式（<code>cdecl</code>）  </li><li><code>windll</code>主要用来载入WIN32调用方式（<code>stdcall</code>）</li><li><code>oledll</code>使用WIN32调用方式（<code>stdcall</code>）且返回值是Windows里返回的HRESULT值<br><font color="BlueViolet">而调用时，最需要注意的去别在于</font><br><font color="Violet"><code>cdll</code>是使用调用者清除的栈的方式。而<code>windll</code>和<code>oledll</code>是使用被调用者清除的方式</font>   </li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="引入ctypes库"><a href="#引入ctypes库" class="headerlink" title="引入ctypes库"></a>引入<code>ctypes</code>库</h3><pre class=" language-Python"><code class="language-Python">    from ctypes import *</code></pre><h3 id="加载dll"><a href="#加载dll" class="headerlink" title="加载dll"></a>加载dll</h3><h4 id="stdcall调用约定"><a href="#stdcall调用约定" class="headerlink" title="stdcall调用约定"></a><code>stdcall</code>调用约定</h4><pre class=" language-Python"><code class="language-Python">    Objdll = ctypes.WinDLL("dllpath") </code></pre><h4 id="cdecl调用约定"><a href="#cdecl调用约定" class="headerlink" title="cdecl调用约定"></a><code>cdecl</code>调用约定</h4><pre class=" language-Python"><code class="language-Python">    Objdll = ctypes.CDLL("dllpath")</code></pre><h2 id="如果有更复杂的使用需求，访问这个"><a href="#如果有更复杂的使用需求，访问这个" class="headerlink" title="如果有更复杂的使用需求，访问这个"></a>如果有更复杂的使用需求，访问这个</h2><p><a href="https://www.cnblogs.com/baihuitestsoftware/articles/5345089.html" target="_blank" rel="noopener">https://www.cnblogs.com/baihuitestsoftware/articles/5345089.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 万千问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> C语言 </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#写上位机调用dll推理库</title>
      <link href="2021/02/06/C%20sharp%E5%86%99%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%B0%83%E7%94%A8dll%E6%8E%A8%E7%90%86%E5%BA%93/"/>
      <url>2021/02/06/C%20sharp%E5%86%99%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%B0%83%E7%94%A8dll%E6%8E%A8%E7%90%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="C-写上位机调用dll推理库"><a href="#C-写上位机调用dll推理库" class="headerlink" title="C#写上位机调用dll推理库"></a>C#写上位机调用dll推理库</h1><h2 id="生成dll文件"><a href="#生成dll文件" class="headerlink" title="生成dll文件"></a>生成dll文件</h2><p>移步我的另一篇博客<br><a href="/2021/02/06/生成可供调用的dll推理库/">生成可供调用的dll推理库</a> </p><h2 id="C-上位机调用"><a href="#C-上位机调用" class="headerlink" title="C#上位机调用"></a>C#上位机调用</h2><p>会写的都会写，就没必要多说了，主要是添加上</p><pre class=" language-C"><code class="language-C">using System.Runtime.InteropServices;namespace WindowsFormsApp1{    public partial class Form1 : Form    {        public Form1()        {            InitializeComponent();        }        [DllImport("video_detector.dll", EntryPoint = "CreateModel", CharSet = CharSet.Ansi)]        public static extern IntPtr CreateModel();        }}        </code></pre><p>然后正常用就完了</p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/2021/02/06/C%20sharp%E5%86%99%E4%B8%8A%E4%BD%8D%E6%9C%BA%E8%B0%83%E7%94%A8dll%E6%8E%A8%E7%90%86%E5%BA%93/1.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> PaddleX </tag>
            
            <tag> Paddle </tag>
            
            <tag> dll </tag>
            
            <tag> C sharp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成可供调用的dll推理库</title>
      <link href="2021/02/06/%E7%94%9F%E6%88%90%E5%8F%AF%E4%BE%9B%E8%B0%83%E7%94%A8%E7%9A%84dll%E6%8E%A8%E7%90%86%E5%BA%93/"/>
      <url>2021/02/06/%E7%94%9F%E6%88%90%E5%8F%AF%E4%BE%9B%E8%B0%83%E7%94%A8%E7%9A%84dll%E6%8E%A8%E7%90%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="生成可供调用的dll推理库"><a href="#生成可供调用的dll推理库" class="headerlink" title="生成可供调用的dll推理库"></a>生成可供调用的dll推理库</h1><h2 id="编辑好-cpp文件"><a href="#编辑好-cpp文件" class="headerlink" title="编辑好.cpp文件"></a>编辑好<code>.cpp</code>文件</h2><p>因为是做目标检测所以我在写检测脚本的时候加入图像处理操作，但是没有单独放接口出来</p><h3 id="添加接口文件"><a href="#添加接口文件" class="headerlink" title="添加接口文件"></a>添加接口文件</h3><p>在头文件中添加接口文件</p><h3 id="接口函数导出"><a href="#接口函数导出" class="headerlink" title="接口函数导出"></a>接口函数导出</h3><p>因为要实现外部调用，所以应给出相应的接口，我使用的是<code>extern &quot;C&quot; __declspec(dllexport)标记方法</code>  的方式进行导出的<br><font color="hotpink">如果是跨语言调用的话，此处注意调用方式的区别，详情参考我的另一篇博客</font><br><a href="/2021/02/06/CDLL和WinDLL的区别/">CDLL和WinDLL的区别</a>   </p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>因为正常的<code>.cpp</code>文件编译后是生成<code>.exe</code>可执行文件且入口函数为<code>int main()</code>，而现在我们是要打包成dll动态推理库，所以我们要将<code>int main()</code> 改造成一个可与外部对接的导出函数<br>网上这里的教程都不太一样，我尝试了几个方案我都使用不通，就根据自己的情况自行修改了<br><img src="/2021/02/06/%E7%94%9F%E6%88%90%E5%8F%AF%E4%BE%9B%E8%B0%83%E7%94%A8%E7%9A%84dll%E6%8E%A8%E7%90%86%E5%BA%93/1.png" alt></p><h2 id="生成dll文件"><a href="#生成dll文件" class="headerlink" title="生成dll文件"></a>生成dll文件</h2><h3 id="打开-项目-gt-属性-gt-常规-gt-配置类型-gt-动态库"><a href="#打开-项目-gt-属性-gt-常规-gt-配置类型-gt-动态库" class="headerlink" title="打开 项目-&gt;属性-&gt;常规-&gt;配置类型-&gt;动态库"></a>打开 项目-&gt;属性-&gt;常规-&gt;配置类型-&gt;动态库</h3><p><img src="/2021/02/06/%E7%94%9F%E6%88%90%E5%8F%AF%E4%BE%9B%E8%B0%83%E7%94%A8%E7%9A%84dll%E6%8E%A8%E7%90%86%E5%BA%93/2.png" alt></p><h3 id="然后生成"><a href="#然后生成" class="headerlink" title="然后生成"></a>然后生成</h3><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在生成的dll文件所在的文件夹下进入powershell，然后执行<code>Python</code>命令<br>然后依次输入</p><pre class=" language-Python"><code class="language-Python">    from ctypes import *    dll = CDLL(dll_path)    print(dll.derived_function())</code></pre><p><font color="Tomato">此处有一些小坑要注意：  </font></p><ul><li>dll_path最好使用绝对路径</li><li>你的dll文件所在的目录一定要加到系统环境变量里，不然你一晚上都不会能读到这个dll文件的，血泪教训！！！  :sob: :cupid:</li><li>当然如果你的dll文件的接口没写好的话也是没法调用的，这个时候就要自行判断问题所在了  </li></ul><h2 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a>测试效果</h2><p><img src="/2021/02/06/%E7%94%9F%E6%88%90%E5%8F%AF%E4%BE%9B%E8%B0%83%E7%94%A8%E7%9A%84dll%E6%8E%A8%E7%90%86%E5%BA%93/3.png" alt><br><img src="/2021/02/06/%E7%94%9F%E6%88%90%E5%8F%AF%E4%BE%9B%E8%B0%83%E7%94%A8%E7%9A%84dll%E6%8E%A8%E7%90%86%E5%BA%93/4.png" alt></p><h2 id="上位机中调用"><a href="#上位机中调用" class="headerlink" title="上位机中调用"></a>上位机中调用</h2><p>看我另一篇博客<br><a href="/2021/02/06/C%20sharp写上位机调用dll推理库/">C#写上位机调用dll推理库</a> </p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> PaddleX </tag>
            
            <tag> Paddle </tag>
            
            <tag> dll </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github出现连接超时</title>
      <link href="2021/02/06/Github%E5%87%BA%E7%8E%B0%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/"/>
      <url>2021/02/06/Github%E5%87%BA%E7%8E%B0%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Github出现连接超时"><a href="#Github出现连接超时" class="headerlink" title="Github出现连接超时"></a>Github出现连接超时</h1><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a><font color="hotpink">解决办法</font></h2><h3 id="修改hosts文件"><a href="#修改hosts文件" class="headerlink" title="修改hosts文件"></a>修改hosts文件</h3><p><font color="pink">用记事本打开即可</font><br>文件路径在<code>C:\Windows\System32\drivers\etc</code><br>添加上，如下图<br><img src="/2021/02/06/Github%E5%87%BA%E7%8E%B0%E8%BF%9E%E6%8E%A5%E8%B6%85%E6%97%B6/1.png" alt="1"></p><h4 id="获取要访问的相关网站的IP"><a href="#获取要访问的相关网站的IP" class="headerlink" title="获取要访问的相关网站的IP"></a><font color="purple">获取要访问的相关网站的IP</font></h4><p>访问<a href="https://www.ipaddress.com" target="_blank" rel="noopener">查询IP</a><br>搜索框内分别输入<code>github.com</code>和<code>github.global.ssl.fastly.net</code>查询对应的IP地址，然后如上图所示格式添加上配置就可以了</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>powershell里<code>ping</code>一下   </p><pre><code>    ping github.com</code></pre>]]></content>
      
      
      <categories>
          
          <category> 万千问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>攻防世界逆向新手区</title>
      <link href="2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/"/>
      <url>2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="攻防世界逆向新手区"><a href="#攻防世界逆向新手区" class="headerlink" title="攻防世界逆向新手区"></a><font color="Plum">攻防世界逆向新手区</font></h1><h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a><font color="DeepPink">open-source</font></h2><p>从<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/1.png" alt><br>可知first = 0xcafe<br>从<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/2.png" alt><br>可知<br><font color="HotPink">second % 17 = 8<br>strlen(argv[3]) = strlen(“h4cky0u”)</font></p><p>所以直接替换到代码里,然后删掉前面多余的就好啦</p><h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a><font color="DeepPink">simple-unpack</font></h2><p>拿到之后先丢进了ida里，然后<kbd>Shift</kbd>+<kbd>F12</kbd>查找字符串，就看到了<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/3.png" alt><br>发现是upx加壳刚准备去脱壳，手一滑就看到了flag<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/4.png" alt></p><h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a><font color="DeepPink">logmein</font></h2><p>查壳没有<br>扔进ida里，在main函数里<kbd>F5</kbd>反编译得到<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/5.png" alt><br>然后分析发现v7要先转为十六进制（末尾的LL表示长长整型）<font color="HotPink">65626d61726168</font><br>然后对着ASCII码表得到<font color="HotPink">ebmarah</font><br>由于x86系列的CPU都是以小端序储存数据的，所以要反过来，<br>即<font color="HotPink">v7=harambe</font><br>看<code>strcpy(v8, &quot;:\&quot;AL_RT^L*.?+6/46&quot;)</code><br>可知<font color="HotPink">v8=:&quot;AL_RT^L*.?+6/46</font><br>然后写个脚本<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/6.png" alt><br>得到的就是flag</p><h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a><font color="DeepPink">insanity</font></h2><p>查壳没有<br>直接扔进ida里查找字符串就找到了，不过这个flag长得奇奇怪怪的</p><h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a><font color="DeepPink">getit</font></h2><p>扔进ida里看到了s和t的值<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/7.png" alt><br>然后看主函数的代码分析可以发现<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/8.png" alt><br>就是这一段在定义flag的值，所以拿出来复现就出来了<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/9.png" alt><br>得到flag</p><h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a><font color="DeepPink">python-trade</font></h2><p>发现是.pyc文件后拿去在线反编译了<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/10.png" alt><br>分析一下倒回去就OK了<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/11.png" alt></p><h2 id="game"><a href="#game" class="headerlink" title="game"></a><font color="DeepPink">game</font></h2><p>ida里搜索字符串找到一个<font color="Pink">done!!! the flag is</font>然后点进对应的函数里，观察就发现这一段就是出flag的<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/12.png" alt><br>然后写个脚本就出来了</p><pre class=" language-Python"><code class="language-Python">a1 = [123, 32, 18, 98, 119, 108, 65, 41, 124, 80, 125, 38, 124, 111,  74, 49, 83,      108, 94, 108, 84, 6, 96, 83, 44, 121, 104, 110, 32, 95, 117, 101, 99, 123,      127, 119, 96, 48, 107, 71, 92, 29, 81, 107, 90, 85, 64, 12, 43, 76, 86, 13,      114, 1, 117, 126, 0]a2 = [18, 64, 98, 5, 2, 4, 6, 3, 6, 48, 49, 65, 32, 12, 48, 65, 31, 78, 62, 32,      49, 32, 1, 57, 96, 3, 21, 9, 4, 62, 3, 5, 4, 1, 2, 3, 44, 65, 78, 32, 16,      97, 54, 16, 44, 52, 32, 64, 89, 45, 32, 65, 15, 34, 18, 16, 0]flag = ''for i in range(0, 56):    a1[0 + i] ^= a2[0 + i]    a1[0 + i] ^= 0x13    flag = flag + chr(a1[i])print(flag)</code></pre><h2 id="Hello-CTF"><a href="#Hello-CTF" class="headerlink" title="Hello, CTF"></a><font color="DeepPink">Hello, CTF</font></h2><p>ida里查找字符串然后我注意到了一串特别的数字<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/14.png" alt><br>直觉告诉我它应该很关键，就点进去了，然后看到<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/15.png" alt><br>然后看了看反编译后的main函数，我发现这一串其实就是输出的有效结果，根据题目提示不一定是明文，就想它应该是加密了然后就感觉是ASCII码然后出来了一串规律字母<font color="HotPink">CrackMeJustForFun</font>，就提交显示正确</p><h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a><font color="DeepPink">re1</font></h2><p>ida第三个打开查找字符串就是结果，或者动态调试</p><h2 id="no-strings-attached"><a href="#no-strings-attached" class="headerlink" title="no-strings-attached"></a><font color="DeepPink">no-strings-attached</font></h2><p>放进ida里，看main函数，发现<code>authenticate()</code>为关键函数，然后去看<code>authenticate()</code>，发现flag在<code>decrypt()</code>里，然后看汇编代码就发现flag就在eax里，动态调试就可以得到flag了</p><h2 id="csaw2013reversing2"><a href="#csaw2013reversing2" class="headerlink" title="csaw2013reversing2"></a><font color="DeepPink">csaw2013reversing2</font></h2><p>看main函数的反汇编代码<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/16.png" alt><br>看if那一段可以发现，这一段代码并没有执行，因为如果执行的话，程序是会退出弹不出来弹窗的，看MessageBoxA可以发现flag就在IpMem里，所以要跳进if里，但是也要跳过<code>__debugbreak()</code>和<code>ExitProcess(0xFFFFFFFF)</code><br>然后去x32dbg动态调试，做出如下修改<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/17.png" alt><br>跳到第二个flag的地方，再运行出来的弹窗就是正确的flag</p><h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a><font color="DeepPink">maze</font></h2><p>  题目描述里说是一个走迷宫的，所以就在想迷宫应该是方方的，由两种不同的什么组合出来的，可能还有两个入口出口的区别。在ida里找的话应该在Hex-View里看，是一段特殊的,就找到了<br>  <img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/21.png" alt><br>  然后看<code>main()</code>函数的反汇编代码<br>  <img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/19.png" alt><br>就知道flag应该是<font color="HotPink">nctf{中间字符长度为24}</font><br>又看到<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/22.png" alt><br>就可以猜想#对应的23应该是迷宫的终点<br>然后看<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/20.png" alt><br>发现四个关键函数<code>sub_400650() sub_400660() sub_400670() sub_400680()</code>分别应该对应左右上下，看函数的内容有&lt;8，所以应该是个8×8矩阵<br><img src="/2020/11/21/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C%E9%80%86%E5%90%91%E6%96%B0%E6%89%8B%E5%8C%BA/23.png" alt><br>入口就应该在左上角<br>就是<font color="HotPink">右下右右下下左下下下右右右右上上左左</font>，对应就能得到flag为<font color="HotPink">nctf{o0oo00O000oooo..OO}</font></p>]]></content>
      
      
      
        <tags>
            
            <tag> 逆向 </tag>
            
            <tag> re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown编辑公式</title>
      <link href="2020/10/03/Markdown%E7%BC%96%E8%BE%91%E5%85%AC%E5%BC%8F/"/>
      <url>2020/10/03/Markdown%E7%BC%96%E8%BE%91%E5%85%AC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">    MathJax.Hub.Config({ tex2jax: {inlineMath: [['$', '$']]}, messageStyle: "none" });</script><h1 id="Markdown编辑公式"><a href="#Markdown编辑公式" class="headerlink" title="Markdown编辑公式"></a>Markdown编辑公式</h1><h2 id="行内与行间"><a href="#行内与行间" class="headerlink" title="行内与行间"></a>行内与行间</h2><ul><li>行内公式<br>在公式代码块的基础上前面加上$ ，后面加上$ 组成</li><li>行间公式<br>在公式代码块前后使用$$ 和$$<h2 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h2><table><thead><tr><th>名称</th><th>大写</th><th>code</th><th>小写</th><th>code</th></tr></thead><tbody><tr><td>alpha</td><td>A</td><td>A</td><td>$\alpha$</td><td>\alpha</td></tr><tr><td>beta</td><td>B</td><td>B</td><td>$\beta$</td><td>\beta</td></tr><tr><td>gamma</td><td>$\Gamma$</td><td>\Gamma</td><td>$\gamma$</td><td>\gamma</td></tr><tr><td>delta</td><td>$\Delta$</td><td>\Delta</td><td>$\delta$</td><td>\delta</td></tr><tr><td>epsilon</td><td>E</td><td>E</td><td>$\epsilon$</td><td>\epsilon</td></tr><tr><td>zeta</td><td>Z</td><td>Z</td><td>$\zeta$</td><td>\zeta</td></tr><tr><td>eta</td><td>H</td><td>H</td><td>$\eta$</td><td>\eta</td></tr><tr><td>theta</td><td>$\Theta$</td><td>\Theta</td><td>$\theta$</td><td>\theta</td></tr><tr><td>iota</td><td>I</td><td>I</td><td>$\iota$</td><td>\iota</td></tr><tr><td>kappa</td><td>K</td><td>K</td><td>$\kappa$</td><td>\kappa</td></tr><tr><td>lambda</td><td>$\Lambda$</td><td>\Lambda</td><td>$\lambda$</td><td>\lambda</td></tr><tr><td>mu</td><td>M</td><td>M</td><td>$\mu$</td><td>\mu</td></tr><tr><td>nu</td><td>N</td><td>N</td><td>$\nu$</td><td>\nu</td></tr><tr><td>xi</td><td>$\Xi$</td><td>\Xi</td><td>$\xi$</td><td>\xi</td></tr><tr><td>omicron</td><td>O</td><td>O</td><td>$\omicron$</td><td>\omicron</td></tr><tr><td>pi</td><td>$\Pi$</td><td>\Pi</td><td>$\pi$</td><td>\pi</td></tr><tr><td>rho</td><td>P</td><td>P</td><td>$\rho$</td><td>\rho</td></tr><tr><td>sigma</td><td>$\Sigma$</td><td>\Sigma</td><td>$\sigma$</td><td>\sigma</td></tr><tr><td>tau</td><td>T</td><td>T</td><td>$\tau$</td><td>\tau</td></tr><tr><td>upsilon</td><td>Y</td><td>Y</td><td>$\upsilon$</td><td>\upsilon</td></tr><tr><td>phi</td><td>$\Phi$</td><td>\Phi</td><td>$\phi$</td><td>\phi</td></tr><tr><td>chi</td><td>X</td><td>X</td><td>$\chi$</td><td>\chi</td></tr><tr><td>psi</td><td>$\Psi$</td><td>\Psi</td><td>$\psi$</td><td>\psi</td></tr><tr><td>omega</td><td>$\Omega$</td><td>\Omega</td><td>$\omega$</td><td>\omega</td></tr></tbody></table></li></ul><h2 id="上标和下标"><a href="#上标和下标" class="headerlink" title="上标和下标"></a>上标和下标</h2><p><font color="DeepPink">默认情况下，上、下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{..} 包裹起来的内容</font></p><ul><li>上标<br>^</li><li>下标<br>_</li></ul><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><ul><li>小括号和方括号<ul><li>使用原始的()和[]</li><li>使用\left(或\right)使符号大小与邻近的公式相适应<font color="DeepPink">适用所有括号类型</font></li></ul></li><li>大括号<ul><li>使用<code>\{</code>和<code>\}</code></li><li>使用<code>\lbrace</code>和<code>\rbrace</code></li></ul></li><li>尖括号<ul><li>使用<code>\langle</code>和<code>\rangle</code></li></ul></li><li>上取整  <ul><li>使用<code>\lceil</code>和<code>\rceil</code></li></ul></li><li>下取整<ul><li>使用<code>\lfloor</code>和<code>\rfloor</code> </li></ul></li></ul><h2 id="求和与积分"><a href="#求和与积分" class="headerlink" title="求和与积分"></a>求和与积分</h2><ul><li>求和<br><font color="DeepPink"><code>\sum</code> 用来表示求和符号，其下标表示求和下限，上标表示上限</font><ul><li><code>$\sum_{r=1}^n$</code>表示 ：$\sum_{r=1}^n$</li><li><code>$$\sum_{r=1}^n$$</code>表示 :<br>$$\sum_{r=1}^n$$</li></ul></li><li>积分<br><code>\int</code>用来表示积分符号，同样地，其上下标表示积分的上下限。如:<code>$\int_{r=1}^\infty$</code> ： $\int_{r=1}^\infty$<br>多重积分同样使用 int ，通过 i 的数量表示积分导数：<br><code>$\iint$</code> : $\iint$<br><code>$\iiint$</code> : $\iiint$</li><li>连乘<ul><li><code>$\prod {a+b}$</code>，输出：$\prod {a+b}$</li><li><code>$\prod_{i=1}^{K}$</code>，输出：$\prod_{i=1}^{K}$</li></ul></li><li>其他类似<ul><li><code>$\prod$</code> ：$\prod$</li><li><code>$\bigcup$</code> ：$\bigcup$</li><li><code>$\bigcap$</code> ：$\bigcap$</li><li><code>$arg\,\max_{c_k}$</code> ：$arg,\max_{c_k}$</li><li><code>$arg\,\min_{c_k}$</code> ：$arg,\min_{c_k}$</li><li><code>$\mathop {argmin}_{c_k}$</code> : $\mathop {argmin}_{c_k}$</li><li><code>$\mathop {argmax}_{c_k}$</code> : $\mathop {argmax}_{c_k}$</li><li><code>$\max_{c_k}$</code> : $\max_{c_k}$</li><li><code>$\min_{c_k}$</code> : $\min_{c_k}$</li></ul></li></ul><h2 id="分式与根式"><a href="#分式与根式" class="headerlink" title="分式与根式"></a>分式与根式</h2><ul><li>分式<ul><li>使用<code>\frac ab</code>，<code>\frac</code>作用于其后的两个组,<font color="BlueViolent">可以用{}来分组</font>，如<code>$\frac {a+c+1}{b+c+2}$</code> 表示 $\frac {a+c+1}{b+c+2}$</li><li>使用<code>\over</code>来分隔一个组的前后两部分，如<code>${a+1\over b+1}$</code>：${a+1\over b+1}$</li></ul></li><li>连分数<br>使用<code>\cfrac</code>代替<code>\frac</code>或者<code>\over</code></li><li>根式<ul><li>使用 <code>\sqrt</code> 来表示</li><li>开平方：<code>$\sqrt {a+b}$</code>：$\sqrt {a+b}$</li><li>开四次方：<code>$\sqrt[4]{\frac xy}$</code> : $\sqrt[4]{\frac xy}$</li></ul></li></ul><h2 id="多行表达式"><a href="#多行表达式" class="headerlink" title="多行表达式"></a>多行表达式</h2><ul><li>分类表达式<br><font color="DeepPink">定义函数的时候经常需要分情况给出表达式，使用<code>\begin{cases}…\end{cases}</code> 。其中：</font><ul><li>使用<code>\\</code> 来分类</li><li>使用<code>&amp;</code> 指示需要对齐的位置</li><li>使用<code>\+空格</code>表示空格<br>例：<pre><code>$$f(n)\begin{cases}\cfrac n2, &amp;if\ n\ is\ even\\3n + 1, &amp;if\  n\ is\ odd\end{cases}$$</code></pre>表示：<br>$$<br>f(n)<br>\begin{cases}<br>\cfrac n2, &amp;if\ n\ is\ even\<br>3n + 1, &amp;if\  n\ is\ odd<br>\end{cases}<br>$$<pre><code>$$L(Y,f(X)) =\begin{cases}0, &amp; \text{Y = f(X)}  \\1, &amp; \text{Y $\neq$ f(X)}\end{cases}$$</code></pre>表示：<br>$$<br>L(Y,f(X)) =<br>\begin{cases}<br>0, &amp; \text{Y = f(X)}  \<br>1, &amp; \text{Y $\neq$ f(X)}<br>\end{cases}<br>$$<br><font color="DeepPink">如果想分类之间的垂直间隔变大，可以使用<code>\\[2ex]</code> 代替<code>\\</code> 来分隔不同的情况。<code>(3ex,4ex</code> 也可以用，<code>1ex</code> 相当于原始距离）。如下所示：</font><pre><code>$$L(Y,f(X)) =\begin{cases}0, &amp; \text{Y = f(X)} \\[5ex]1, &amp; \text{Y $\neq$ f(X)}\end{cases}$$</code></pre>表示：<br>$$<br>L(Y,f(X)) =<br>\begin{cases}<br>0, &amp; \text{Y = f(X)} \[5ex]<br>1, &amp; \text{Y $\neq$ f(X)}<br>\end{cases}<br>$$</li></ul></li><li>多行表达式<br><font color="DeepPink">有时候需要将一行公式分多行进行显示</font><pre><code>$$\begin{equation}\begin{split}  a&amp;=b+c-d \\  &amp;\quad +e-f \\  &amp;=g+h\\  &amp;= i\end{split}\end{equation}$$</code></pre>表示：<br>$$<br>\begin{equation}\begin{split}<br>a&amp;=b+c-d \<br>&amp;\quad +e-f \<br>&amp;=g+h\<br>&amp; =i<br>\end{split}\end{equation}<br>$$<br><font color="DeepPink">其中<code>begin{equation}</code> 表示开始方程，<code>end{equation}</code> 表示方程结束；<code>begin{split}</code> 表示开始多行公式，<code>end{split}</code> 表示结束；公式中用<code>\\</code> 表示回车到下一行，<code>&amp;</code> 表示对齐的位置</font></li><li>方程组<br><font color="DeepPink">使用<code>\begin{array}...\end{array}</code> 与<code>\left \{</code>与<code>\right.</code> 配合表示方程组:</font>  <pre><code>$$\left \{ \begin{array}{c}a_1x+b_1y+c_1z=d_1 \\ a_2x+b_2y+c_2z=d_2 \\ a_3x+b_3y+c_3z=d_3\end{array}\right.$$</code></pre>表示：<br>$$<br>\left {<br>\begin{array}{c}<br>a_1x+b_1y+c_1z=d_1 \<br>a_2x+b_2y+c_2z=d_2 \<br>a_3x+b_3y+c_3z=d_3<br>\end{array}<br>\right.<br>$$<br><font color="Tomato">通常MathJax通过内部策略自己管理公式内部的空间，因此<code>a…b</code> 与<code>a…….b</code> （.表示空格）都会显示为<code>ab</code> 。可以通过在<code>ab</code> 间加入<code>\</code> ,增加些许间隙，<code>\;</code> 增加较宽的间隙，<code>\quad</code> 与<code>\qquad</code> 会增加更大的间隙</font></li></ul><h2 id="特殊函数与符号"><a href="#特殊函数与符号" class="headerlink" title="特殊函数与符号"></a>特殊函数与符号</h2><ul><li>三角函数<ul><li><code>sin(x)</code> : $sin(x)$</li><li><code>arctan(x)</code> : $arctan(x)$</li><li><code>cos(x)</code> : $cos(x)$</li></ul></li><li>比较运算符<ul><li>小于(<code>\lt</code>)：$\lt$    </li><li>大于(<code>\gt</code>)：$\gt$    </li><li>小于等于(<code>\le</code>)：$\le$    </li><li>大于等于(<code>\ge</code>)：$\ge$   </li><li>不等于(<code>\ne</code>) : $\ne$   </li><li>可以在这些运算符前面加上<code>\not</code> ，如<code>\not\lt</code> : $\not\lt$  </li></ul></li><li>集合关系与运算   <ul><li>并集(<code>\cup</code> ): $\cup$</li><li>交集(<code>\cap</code> ): $\cap$</li><li>差集(<code>\setminus</code> ): $\setminus$</li><li>子集(<code>\subset</code> ): $\subset$</li><li>子集(<code>\subseteq</code> ): $\subseteq$</li><li>非子集(<code>\subsetneq</code> ): $\subsetneq$</li><li>父集(<code>\supset</code> ): $\supset$</li><li>属于(<code>\in</code> ): $\in$</li><li>不属于(<code>\notin</code> ): $\notin$</li><li>空集(<code>\emptyset</code> ): $\emptyset$</li><li>空(<code>\varnothing</code> ): $\varnothing$</li></ul></li><li>排列<ul><li><code>\binom{n+1}{2k}</code> ： $\binom{n+1}{2k}$</li><li><code>{n+1 \choose 2k}</code> : ${n+1 \choose 2k}$</li></ul></li><li>箭头   <ul><li><code>\to</code> : $\to$   </li><li><code>\rightarrow</code> : $\rightarrow$    </li><li><code>\leftarrow</code> : $\leftarrow$    </li><li><code>\Rightarrow</code> : $\Rightarrow$     </li><li><code>\Leftarrow</code> : $\Leftarrow$   </li><li><code>\mapsto</code> : $\mapsto$</li></ul></li><li>逻辑运算符<ul><li><code>\land</code> : $\land$</li><li><code>\lor</code> : $\lor$</li><li><code>\lnot</code> : $\lnot$</li><li><code>\forall</code> : $\forall$</li><li><code>\exists</code> : $\exists$</li><li><code>\top</code> : $\top$</li><li><code>\bot</code> : $\bot$</li><li><code>\vdash</code> : $\vdash$</li><li><code>\vDash</code> : $\vDash$</li></ul></li><li>操作符<br>*<code>\star</code> : $\star$<br>*<code>\ast</code> : $\ast$<br>*<code>\oplus</code> : $\oplus$<br>*<code>\circ</code> : $\circ$<br>*<code>\bullet</code> : $\bullet$</li><li>等于<br>*<code>\approx</code> : $\approx$<br>*<code>\sim</code> : $\sim$<br>*<code>\equiv</code> : $\equiv$<br>*<code>\prec</code> : $\prec$</li><li>范围<br>*<code>\infty</code> : $\infty$<br>*<code>\aleph_o</code> : $\aleph_o$<br>*<code>\nabla</code> : $\nabla$<br>*<code>\Im</code> : $\Im$<br>*<code>\Re</code> : $\Re$    </li><li>模运算<br>*<code>\pmod</code> : $b \pmod n$<br>如<code>a \equiv b \pmod n</code> : $a \equiv b \pmod n$  </li><li>点<br>*<code>\ldots</code> : $\ldots$<br>*<code>\cdots</code> : $\cdots$<br>*<code>\cdot</code> : $\cdot$<br>其区别是点的位置不同，<code>\ldots</code>位置稍低，<code>\cdots</code>位置居中<pre><code>$$\begin{equation}a_1+a_2+\ldots+a_n \\ a_1+a_2+\cdots+a_n\end{equation}$$</code></pre>表示：<br>$$<br>\begin{equation}<br>a_1+a_2+\ldots+a_n \<br>a_1+a_2+\cdots+a_n<br>\end{equation}<br>$$<h2 id="顶部符号"><a href="#顶部符号" class="headerlink" title="顶部符号"></a>顶部符号</h2>对于单字符，<code>\hat x</code> ：$\hat x$<br>多字符可以使用<code>\widehat {xy}</code> ：$\widehat {xy}$<br>类似的还有:<br>(\overline x ): \overline x<br>矢量<code>\vec</code> : $\vec x$<br>向量<code>\overrightarrow {xy}</code> : $\overrightarrow {xy}$<br><code>\dot x</code> : $\dot x$<br><code>\ddot x</code> : $\ddot x$<br>(<code>dot {\dot x}</code> : </li></ul><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>使用<code>\begin{array}{列样式}…\end{array}</code> 这样的形式来创建表格，列样式可以是<code>clr</code> 表示居中，左，右对齐，还可以使用<code>|</code>表示一条竖线。表格中各行使用<code>\\</code> 分隔，各列使用<code>&amp;</code>分隔。使用<code>\hline</code>在本行前加入一条直线。 例如:</p><pre><code>$$\begin{array}{c|lcr}n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \\\hline1 &amp; 0.24 &amp; 1 &amp; 125 \\2 &amp; -1 &amp; 189 &amp; -8 \\3 &amp; -20 &amp; 2000 &amp; 1+10i \\\end{array}$$</code></pre><p>得到：<br>$$<br>\begin{array}{c|lcr}<br>n &amp; \text{Left} &amp; \text{Center} &amp; \text{Right} \<br>\hline<br>1 &amp; 0.24 &amp; 1 &amp; 125 \<br>2 &amp; -1 &amp; 189 &amp; -8 \<br>3 &amp; -20 &amp; 2000 &amp; 1+10i \<br>\end{array}<br>$$</p><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><h3 id="基本内容"><a href="#基本内容" class="headerlink" title="基本内容"></a>基本内容</h3><p>使用 <code>\begin{matrix}…\end{matrix}</code> 这样的形式来表示矩阵，在<code>\begin</code> 与<code>\end</code> 之间加入矩阵中的元素即可。矩阵的行之间使用<code>\\</code> 分隔，列之间使用<code>&amp;</code> 分隔，例如:</p><pre><code>$$\begin{matrix}1 &amp; x &amp; x^2 \\1 &amp; y &amp; y^2 \\1 &amp; z &amp; z^2 \\\end{matrix}$$</code></pre><p>得到:<br>$$<br>\begin{matrix}<br>1 &amp; x &amp; x^2 \<br>1 &amp; y &amp; y^2 \<br>1 &amp; z &amp; z^2 \<br>\end{matrix}<br>$$</p><h3 id="括号-1"><a href="#括号-1" class="headerlink" title="括号"></a>括号</h3><p>如果要对矩阵加括号，可以像上文中提到的一样，使用<code>\left</code> 与<code>\right</code> 配合表示括号符号。也可以使用特殊的<code>matrix</code> 。即替换<code>\begin{matrix}…\end{matrix}</code> 中<code>matrix</code> 为<code>pmatrix</code> ，<code>bmatrix</code> ，<code>Bmatrix</code> ，<code>vmatrix</code> , <code>Vmatrix</code><br>    pmatrix<code>$\begin{pmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{pmatrix}$</code> : $\begin{pmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{pmatrix}$<br>    bmatrix<code>$\begin{bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{bmatrix}$</code> : $\begin{bmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{bmatrix}$<br>    Bmatrix<code>$\begin{Bmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{Bmatrix}$</code> : $\begin{Bmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{Bmatrix}$<br>    vmatrix<code>$\begin{vmatrix}1 &amp; 2 \\ 3 &amp; 4\\ \end{vmatrix}$</code> : $\begin{vmatrix}1 &amp; 2 \ 3 &amp; 4\ \end{vmatrix}$  </p><h3 id="元素省略"><a href="#元素省略" class="headerlink" title="元素省略"></a>元素省略</h3><p>可以使用<code>\cdots</code> ：⋯，<code>\ddots</code>：⋱ ，<code>\vdots</code>：⋮ 来省略矩阵中的元素，如：  </p><pre><code>$$\begin{pmatrix}1&amp;a_1&amp;a_1^2&amp;\cdots&amp;a_1^n\\1&amp;a_2&amp;a_2^2&amp;\cdots&amp;a_2^n\\\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\1&amp;a_m&amp;a_m^2&amp;\cdots&amp;a_m^n\\\end{pmatrix}$$</code></pre><p>表示：<br>$$<br>\begin{pmatrix}<br>1&amp;a_1&amp;a_1^2&amp;\cdots&amp;a_1^n\<br>1&amp;a_2&amp;a_2^2&amp;\cdots&amp;a_2^n\<br>\vdots&amp;\vdots&amp;\vdots&amp;\ddots&amp;\vdots\<br>1&amp;a_m&amp;a_m^2&amp;\cdots&amp;a_m^n\<br>\end{pmatrix}<br>$$</p><h3 id="增广矩阵"><a href="#增广矩阵" class="headerlink" title="增广矩阵"></a>增广矩阵</h3><p>增广矩阵需要使用前面的表格中使用到的 <code>\begin{array} ... \end{array}</code> 来实现</p><pre><code>$$\left[  \begin{array}  {c c | c} %这里的c表示数组中元素对其方式：c居中、r右对齐、l左对齐，竖线表示2、3列间插入竖线1 &amp; 2 &amp; 3 \\\hline %插入横线，如果去掉\hline就是增广矩阵4 &amp; 5 &amp; 6\end{array}  \right]$$</code></pre><p>显示为：<br>$$<br>\left[  \begin{array}  {c c | c} %这里的c表示数组中元素对其方式：c居中、r右对齐、l左对齐，竖线表示2、3列间插入竖线<br>1 &amp; 2 &amp; 3 \<br>\hline %插入横线，如果去掉\hline就是增广矩阵<br>4 &amp; 5 &amp; 6<br>\end{array}  \right]<br>$$</p><h2 id="公式标记与引用"><a href="#公式标记与引用" class="headerlink" title="公式标记与引用"></a>公式标记与引用</h2><p>  使用<code>\tag{yourtag}</code> 来标记公式，如果想在之后引用该公式，则还需要加上<code>\label{yourlabel}</code> 在<code>\tag</code> 之后，如<code>$$a = x^2 - y^3 \tag{1}\labe{1}$$</code> 显示为：<br>$$a := x^2 - y^3 \tag{1}\labe{1}$$<br>  如果不需要被引用，只使用<code>\tag{yourtag}</code> ，<code>$$x+y=z\tag{1.1}$$</code>显示为：<br>$$x+y=z\tag{1.1}$$<br>  <code>\tab{yourtab}</code> 中的内容用于显示公式后面的标记。公式之间通过<code>\label{}</code> 设置的内容来引用。为了引用公式，可以使用<code>\eqref{yourlabel}</code> ，如<code>$$a + y^3 \stackrel{\eqref{1}}= x^2$$</code> 显示为：<br>$$a + y^3 \stackrel{\eqref{1}}= x^2$$</p><p>或者使用<code>\ref{yourlabel}</code> 不带括号引用，如<code>$$a + y^3 \stackrel{\ref{111}}= x^2$$</code> 显示为:<br>$$a + y^3 \stackrel{\ref{1}}= x^2$$</p><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><h3 id="黑板粗字体"><a href="#黑板粗字体" class="headerlink" title="黑板粗字体"></a>黑板粗字体</h3><p>此字体经常用来表示代表实数、整数、有理数、复数的大写字母。<br><code>$\mathbb ABCDEF$</code>：$\mathbb ABCDEF$<br><code>$\Bbb ABCDEF$</code>：$\Bbb ABCDEF$</p><h3 id="黑体字"><a href="#黑体字" class="headerlink" title="黑体字"></a>黑体字</h3><p><code>$\mathbf ABCDEFGHIJKLMNOPQRSTUVWXYZ$</code> : $\mathbf ABCDEFGHIJKLMNOPQRSTUVWXYZ$<br><code>$\mathbf abcdefghijklmnopqrstuvwxyz$</code> : $\mathbf abcdefghijklmnopqrstuvwxyz$</p><h3 id="打印机字体"><a href="#打印机字体" class="headerlink" title="打印机字体"></a>打印机字体</h3><p><code>$\mathtt ABCDEFGHIJKLMNOPQRSTUVWXYZ$</code> : $\mathtt ABCDEFGHIJKLMNOPQRSTUVWXYZ$</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p>直接输入地址</p><h2 id="Emoji小表情"><a href="#Emoji小表情" class="headerlink" title="Emoji小表情"></a>Emoji小表情</h2><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">https://www.webfx.com/tools/emoji-cheat-sheet/</a></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡尔曼Kalman滤波跟踪</title>
      <link href="2020/10/03/%E5%8D%A1%E5%B0%94%E6%9B%BCKalman%E6%BB%A4%E6%B3%A2%E8%B7%9F%E8%B8%AA/"/>
      <url>2020/10/03/%E5%8D%A1%E5%B0%94%E6%9B%BCKalman%E6%BB%A4%E6%B3%A2%E8%B7%9F%E8%B8%AA/</url>
      
        <content type="html"><![CDATA[<h1 id="卡尔曼Kalman滤波跟踪"><a href="#卡尔曼Kalman滤波跟踪" class="headerlink" title="卡尔曼Kalman滤波跟踪"></a>卡尔曼Kalman滤波跟踪</h1><p>kalman滤波：<br>1.用上一次的最优状态估计和最优估计误差去计算这一次的先验状态估计和先验误差估计；<br>2.用1得到的本次先验误差估计和测量噪声，得到卡尔曼增益；<br>3.用1，2步骤得到所有先验误差估计和测量噪声，得到本次的最优估计。<br><font color="DeepPink">总结：对模型的预测值和实际的观测值进行加权，迭代计算出未来的状态</font></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li>卡尔曼的核心：预测＋反馈  </li><li>卡尔曼滤波算法分为两个阶段：  <ul><li>预测阶段：卡尔曼滤波器使用由当前点计算的协方差来估计目标的新位置；  </li><li>更新阶段：卡尔曼滤波器记录目标的位置，并为下一次循环计算修正协方差。</li></ul></li><li>观测数据：可能存在或多或少的误差的采集的实际数据  </li><li>最优估计：算法计算出来接近于真实值的估计    </li><li>均方误差：误差（每个估计值与真实值的差）的平方，再求和，再求平均。多样本时，均方误差等于每个样本的误差平方乘以该样本出现的概率，再求和。   </li><li>方差：描述随机变量的离散程度，具体来说是变量值离期望值的距离。    </li><li>最小均方误差估计：估计参数，使得估计出来的模型和真实值之间的误差平方期望最小。   </li><li>两个变量之间的协方差：在协方差矩阵中，对角线元素即为方差。x, y都大于期望，协方差为正值。</li></ul><h2 id="核心公式"><a href="#核心公式" class="headerlink" title="核心公式"></a>核心公式</h2><font color="HotPink">对于离散控制过程的系统，其系统状态和系统测量值可进行以下表示：    <p>X(k) = AX(k-1) + BU(k) + W(k)<br>Z(k) = HX(k) + V(k)<br></p></font><p></p><ul><li>X(k)： k时刻系统状态</li><li>A: 状态转移矩阵，对应opencv里kalman滤波器的transitionMatrix矩阵</li><li>B: 控制输入矩阵，对应opencv里kalman滤波器的controlMatrix矩阵</li><li>H：系统测量矩阵，对应opencv里kalman滤波器的measurementMatrix矩阵</li><li>U(k)：k时刻对系统的控制量</li><li>Z(k)：k时刻的测量值</li><li>W(k)：系统过程噪声，为高斯白噪声，协方差为Q，对应opencv里的kalman滤波器的processNoiseCov矩阵</li><li>V(k)：测量噪声，也为高斯白噪声，协方差为R，对应opencv里的kalman滤波器的measurementNoiseCov矩阵 </li></ul><font color="Crimson">真正核心的五个公式：    <p>$X(k|k-1) = AX(k-1|k-1) + BU(k)$<br>$P(k|k-1) = AP(k-1|k-1)A^T + Q$<br>$Kg(k) = {P(k|k-1)H^T\over HP(k|k-1)H^T + R}$<br>$X(k|k) = X(k|k-1) + Kg(k)(Z(k) - HK(k|k-1))$<br>$P(k|k) = (1-Kg(k)H)P(k|k-1)$<br></p></font><p></p><ul><li><p>预测值的计算</p><ul><li>式(1)：计算基于k-1时刻状态对k时刻系统状态的预测值<ul><li>X(k|k-1)：基于k-1时刻状态对k时刻状态的预测值，对应opencv里kalman滤波器的predict()输出，即statePre矩阵</li><li>X(k-1|k-1)：k-1时刻状态的最优结果，对应opencv里kalman滤波器的上一次状态的statePost矩阵</li><li>U(k)：k时刻的系统控制量，无则为0</li><li>A：状态转移矩阵，对应opencv里kalman滤波器的transitionMatrix矩阵</li><li>B：控制输入矩阵，对应opencv里kalman滤波器的controlMatrix矩阵</li></ul></li><li>式(2)：计算X(k|k-1)对应的协方差的预测值<ul><li>P(k|k-1)：   基于k-1时刻的协方差计算k时刻协方差的预测值，对应opencv里kalman滤波器的errorCovPre矩阵</li><li>P(k-1|k-1)：k-1时刻协方差的最优结果，对应opencv里kalman滤波器的上一次状态的errorCovPost矩阵</li><li>Q：系统过程噪声协方差，对应opencv里kalman滤波器的processNoiseCov矩阵</li></ul></li></ul></li><li><p>增益的计算</p><ul><li>Kg(k)：k时刻的kalman增益，为估计量的方差占总方差(估计量方差和测量方差)的比重，对应opencv里kalman滤波器的gain矩阵</li><li>H：系统测量矩阵，对应opencv里kalman滤波器的measurementMatrix矩阵</li><li>R： 测量噪声协方差，对应opencv里的kalman滤波器的measurementNoiseCov矩阵</li></ul></li><li><p>k时刻的更新</p><ul><li>式(4)：计算k时刻系统状态最优值    <ul><li>X(k|k)：k时刻系统状态的最优结果，对应opencv里kalman滤波器的k时刻状态的statePost矩阵     </li><li>Z(k)：k时刻系统测量值</li></ul></li><li>式(5)：计算k时刻系统最优结果对应的协方差<ul><li>P(k|k)：k时刻系统最优结果对应的协方差，对应opencv里kalman滤波器的errorCovPost矩阵</li></ul></li></ul></li><li><p>输出即为X(k|k)，k时刻系统状态最优估计值。 </p></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class=" language-Python"><code class="language-Python">import cv2import numpy as npminGreen = (35, 43, 46)maxGreen = (77, 255, 255)stateSize = 6measSize = 4coutrSize = 0kf = cv2.KalmanFilter(stateSize, measSize, coutrSize)state = np.zeros(stateSize, np.float32)meas = np.zeros(measSize, np.float32)procNoise = np.zeros(stateSize, np.float32)cv2.setIdentity(kf.transitionMatrix)kf.measurementMatrix = np.zeros((measSize, stateSize), np.float32)kf.measurementMatrix[0, 0] = 1.0kf.measurementMatrix[1, 1] = 1.0kf.measurementMatrix[2, 4] = 1.0kf.measurementMatrix[3, 5] = 1.0cv2.setIdentity(kf.processNoiseCov)kf.processNoiseCov[0, 0] = 1e-2kf.processNoiseCov[1, 1] = 1e-2kf.processNoiseCov[2, 2] = 5.0kf.processNoiseCov[3, 3] = 5.0kf.processNoiseCov[4, 4] = 1e-2kf.processNoiseCov[5, 5] = 1e-2cv2.setIdentity(kf.measurementNoiseCov)video_cap = cv2.VideoCapture('F:/test/1.mp4')fps = video_cap.get(cv2.CAP_PROP_FPS)size = (int(video_cap.get(cv2.CAP_PROP_FRAME_WIDTH)), int(video_cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))videoWriter = cv2.VideoWriter('F:/2.mp4', cv2.VideoWriter_fourcc('m', 'p', '4', 'v'), fps, size)ticks = 0i = 0found = FalsenotFoundCount = 0prePointCen = []meaPointCen = []while True:    ret, frame = video_cap.read()    if ret is False:        break    cv2.imshow('frame', frame)    cv2.waitKey(1)    precTick = ticks    ticks = float(cv2.getTickCount())    res = frame.copy()    dT = float((ticks - precTick)/cv2.getTickFrequency())    if found:        kf.transitionMatrix[0, 2] = dT        kf.transitionMatrix[1, 3] = dT        state = kf.predict()        width = state[4]        height = state[5]        x_left = state[0] - width/2        y_left = state[1] - height/2        x_right = state[0] + width/2        y_right = state[1] + height/2        center_x = state[0]        center_y = state[1]        prePointCen.append((int(center_x), int(center_y)))    frame = cv2.GaussianBlur(frame, (5, 5), 3.0, 3.0)    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)    rangeRes = cv2.inRange(frame, minGreen, maxGreen)    kernel = np.ones((3, 3), np.uint8)    rangeRes = cv2.erode(rangeRes, kernel, iterations=2)    rangeRes = cv2.dilate(rangeRes, kernel, iterations=2)    cv2.waitKey(1)    contours = cv2.findContours(rangeRes.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)[-2]    target = []    Box = []    for i in range(len(contours)):        x, y, w, h = cv2.boundingRect(np.array(contours[i]))        ratio = float(w/h)        if ratio > 1.0:            ratio = 1.0 / ratio        if ratio > 0.75 and w*h >= 400:            target.append(contours[i])            Box.append([x, y, w, h])    for i in range(len(target)):        cv2.drawContours(res, target, i, (20, 150, 20), 1)        cv2.rectangle(res, (Box[i][0], Box[i][1]), (Box[i][0]+Box[i][2], Box[i][1]+Box[i][3]), (0, 255, 0), 2)        center_x = Box[i][0] + Box[i][2] / 2        center_y = Box[i][1] + Box[i][3] / 2        meaPointCen.append((int(center_x), int(center_y)))        cv2.circle(res, (int(center_x), int(center_y)), 2, (20, 150, 20), -1)        name = "(" + str(center_x) + "," + str(center_y) + ")"        cv2.putText(res, name, (int(center_x) + 3, int(center_y) - 3), cv2.FONT_HERSHEY_COMPLEX, 0.5, (20, 150, 20), 2)    n = len(prePointCen)    for i in range(1, n):        if prePointCen[i-1] is None or prePointCen[i] is None:            continue        cv2.line(res, prePointCen[i-1], prePointCen[i], (0, 0, 255), 1, 4)    if len(target) == 0:        notFoundCount += 1        if notFoundCount >= 100:            found = False    else:        notFoundCount = 0        meas[0] = Box[0][0] + Box[0][2] / 2        meas[1] = Box[0][1] + Box[0][3] / 2        meas[2] = float(Box[0][2])        meas[3] = float(Box[0][3])        if not found:            for i in range(len(kf.errorCovPre)):                kf.errorCovPre[i, i] = 1            state[0] = meas[0]            state[1] = meas[1]            state[2] = 0            state[3] = 0            state[4] = meas[2]            state[5] = meas[3]            kf.statePost = state            found = True        else:            kf.correct(meas)  # Kalman修正            cv2.imshow("res", res)            cv2.waitKey(1)    videoWriter.write(res)cv2.waitKey(0)cv2.destroyAllWindows()</code></pre><h2 id="运行截图"><a href="#运行截图" class="headerlink" title="运行截图"></a>运行截图</h2><p><img src="/2020/10/03/%E5%8D%A1%E5%B0%94%E6%9B%BCKalman%E6%BB%A4%E6%B3%A2%E8%B7%9F%E8%B8%AA/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 视觉 </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四种去噪操作</title>
      <link href="2020/10/03/%E5%9B%9B%E7%A7%8D%E5%8E%BB%E5%99%AA%E6%93%8D%E4%BD%9C/"/>
      <url>2020/10/03/%E5%9B%9B%E7%A7%8D%E5%8E%BB%E5%99%AA%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="四种常见的去噪操作"><a href="#四种常见的去噪操作" class="headerlink" title="四种常见的去噪操作"></a>四种常见的去噪操作</h1><h2 id="均值滤波"><a href="#均值滤波" class="headerlink" title="均值滤波"></a>均值滤波</h2><p>当对一个值进行滤波时，使用当前值与周围8个值之和，取平均做为当前值</p><pre class=" language-Python"><code class="language-Python">    cv2.blur(img, (3, 3))    # 第二个参数代表进行均值滤波的方框大小</code></pre><h2 id="方框滤波"><a href="#方框滤波" class="headerlink" title="方框滤波"></a>方框滤波</h2><pre class=" language-Python"><code class="language-Python">    cv2.boxfilter(img, -1, (3, 3), normalize=True)    # 当normalize=True时，与均值滤波结果相同， normalize=False，表示对加和后的九个点不进行平均操作，大于255的使用255表示</code></pre><h2 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h2><p>$$<br>G(x) =<br>\begin{cases}<br>\frac {1}{\sqrt{2\pi}\sigma}e^{-\frac {x^2}{2 \sigma^2}}<br>\end{cases}<br>$$<br>根据高斯的距离对周围的点进行加权,求平均值1，0.8， 0.6， 0.8</p><pre class=" language-Python"><code class="language-Python">    cv2.Guassianblur(img, (3, 3), 1)    # 1表示σ， x表示与当前值得距离，计算出的G(x)表示权重值</code></pre><h2 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h2><p>相当于将9个值进行排序，取中值作为当前值</p><pre class=" language-Python"><code class="language-Python">    cv2.medianBlur(img, 3)    # 3表示当前的方框尺寸</code></pre><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><pre class=" language-Python"><code class="language-Python">    img = np.vstack(要合并的几个图像名，用逗号分隔)</code></pre>]]></content>
      
      
      <categories>
          
          <category> 视觉 </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中的reshape()</title>
      <link href="2020/10/02/Python%E4%B8%AD%E7%9A%84reshape/"/>
      <url>2020/10/02/Python%E4%B8%AD%E7%9A%84reshape/</url>
      
        <content type="html"><![CDATA[<h1 id="Python中的reshape"><a href="#Python中的reshape" class="headerlink" title="Python中的reshape()"></a>Python中的reshape()</h1><p><code>reshape(x, newshape, order=&#39;C&#39;)</code><br>reshape函数用于改变数组形状，且原数据不发生变化</p><h2 id="order参数"><a href="#order参数" class="headerlink" title="order参数"></a>order参数</h2><p>其中<code>order=&#39;C&#39;</code>代表是按照行顺序，<br>如果是F则是按照列顺序，<br>如果是A则是按照数据在内存中存储的顺序来  </p><h2 id="x参数"><a href="#x参数" class="headerlink" title="x参数"></a>x参数</h2><p>代表新数组行数</p><h2 id="newshape参数"><a href="#newshape参数" class="headerlink" title="newshape参数"></a>newshape参数</h2><p>代表新数组列数<br><font color="HotPink">当x=-1的时候，newshape给定列数，行数则由Numpy自行计算<br>当newshape=-1的时候，x给定行数，列数则由Numpy自行计算<br></font></p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>opencv绘图函数</title>
      <link href="2020/10/02/opencv%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0/"/>
      <url>2020/10/02/opencv%E7%BB%98%E5%9B%BE%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="opencv绘图函数"><a href="#opencv绘图函数" class="headerlink" title="opencv绘图函数"></a>opencv绘图函数</h1><p><font color="BlueViolet">首先要创造一个背景图，</font></p><pre class=" language-Python"><code class="language-Python">    img=np.zeros((像素高,像素宽,3), np.uint8)    # 3代表BGR三种颜色，uint8是用0-255表示所有颜色，此时为黑色背景</code></pre><p>其实np.zeros()只两个参数，第一个是创建的图片矩阵大小，第二个是数据类型，所以<code>np.uint8</code>可以被<code>(B, G, R)</code>代替，这样就可以改变背景颜色<br></p><h2 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h2><pre><code>    cv2.line(图像名, 起点坐标, 终点坐标, 颜色数组, 线宽)</code></pre><h2 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h2><pre><code>    cv2.rectangle(图像名, 左上顶点坐标, 右下顶点左边, 颜色数组, 线宽)</code></pre><p><font color="DeepPink">当线宽为-1时，表示封闭图形的颜色填充</font></p><h2 id="圆"><a href="#圆" class="headerlink" title="圆"></a>圆</h2><pre class=" language-Python"><code class="language-Python">    cv2.circle(图像名, 圆心坐标, 半径, 颜色数组, 线宽)</code></pre><h2 id="椭圆"><a href="#椭圆" class="headerlink" title="椭圆"></a>椭圆</h2><pre><code>    cv2.ellipse(图像名, 中心坐标, (长轴长, 短轴长), 椭圆沿逆时针方向旋转的角度, 长轴顺时针方向起始的角度, 结束角度, 颜色数组, 线宽)</code></pre><h2 id="多边形"><a href="#多边形" class="headerlink" title="多边形"></a>多边形</h2><pre class=" language-Python"><code class="language-Python">    pts = np.array([顶点列表], np.int32)    pts = pts.reshape((-1,1,2))    img = cv2.polylines(图像名, [pts], True, 颜色数组, 线宽)</code></pre><p><font color="Yellow">关于<code>reshape()</code>函数可以看我的另一篇博客</font><br><a href="https://bolaado.github.io/2020/10/02/Python%E4%B8%AD%E7%9A%84reshape/" target="_blank" rel="noopener">https://bolaado.github.io/2020/10/02/Python%E4%B8%AD%E7%9A%84reshape/</a></p>]]></content>
      
      
      <categories>
          
          <category> 视觉 </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PaddlePaddle安装</title>
      <link href="2020/10/01/PaddlePaddle%E5%AE%89%E8%A3%85/"/>
      <url>2020/10/01/PaddlePaddle%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="安装paddle（飞桨）"><a href="#安装paddle（飞桨）" class="headerlink" title="安装paddle（飞桨）"></a>安装paddle（飞桨）</h1><p>cmd里敲<br>CPU版<br><code>conda install paddlepaddle</code><br>GPU版  </p><pre><code>    # CUDA 9，cuDNN 7.3+:    conda install paddlepaddle-gpu cudatoolkit=9.0    # CUDA 10.0，cuDNN 7.3+    conda install paddlepaddle-gpu cudatoolkit=10.0</code></pre><p>没有vpn的话就得换源，输入</p><pre><code>    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/    conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/Paddle/    conda config --set show_channel_urls yes   </code></pre><p><font color="DeepPink">在命令行里可能敲了<code>-</code>之后，<code>-</code>以及它后面的命令都不会被显示出来，直到有一个空格，也就是说<code>-add</code>可能不会显示出来，这都是正常的，我也不知道为什么之前是不会隐藏的现在突然变了，可能有的人使用的时候并不会</font></p><p>如果出现了问题，看我的另一篇博客<br><a href="https://bolaado.github.io/2020/10/01/Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve/" target="_blank" rel="noopener">https://bolaado.github.io/2020/10/01/Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve/</a></p>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> paddle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Solving environment: failed with initial frozen solve.Retrying with flexible solve</title>
      <link href="2020/10/01/Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve/"/>
      <url>2020/10/01/Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve/</url>
      
        <content type="html"><![CDATA[<h1 id="Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve"><a href="#Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve" class="headerlink" title="Solving environment: failed with initial frozen solve.Retrying with flexible solve"></a>Solving environment: failed with initial frozen solve.Retrying with flexible solve</h1><p>用conda装paddle的时候出现了这个报错  </p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><code>conda update -n base conda</code><br><code>conda update --all</code><br><font color="BlueViolet">然后如果还是不行，就再加一行（但实际上大部分情况这样就可以了）</font><br><code>conda update --prefix</code><br>会自己跳出来一段后面的目录，不用管它回车就行了，然后常规操作，我挑出来过是否允许python.exe都点允许，然后命令行出现y/n就都填y就好，完成后再一次<code>conda update --all</code><br>最后安装好之后，尝试一下进入python解释器，输入</p><pre><code>  import paddle.fluid  paddle.fluid.install_check.run_check()</code></pre><p>出现如下图就成功了<br><img src="/2020/10/01/Solving-environment-failed-with-initial-frozen-solve-Retrying-with-flexible-solve/1.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
          <category> 遇见的问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> paddle </tag>
            
            <tag> conda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QGC安装</title>
      <link href="2020/10/01/QGC%E5%AE%89%E8%A3%85/"/>
      <url>2020/10/01/QGC%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="QGC安装"><a href="#QGC安装" class="headerlink" title="QGC安装"></a>QGC安装</h1><p>大部分的教程都太老了所以整理了一下自己写了一套</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>直接百度QGC选第一个进官网，进去后如下所示<br><img src="/2020/10/01/QGC%E5%AE%89%E8%A3%85/1.png" alt="1"><br>点download<br><img src="/2020/10/01/QGC%E5%AE%89%E8%A3%85/2.png" alt="2"><br>在Windows下点蓝字就可以开始下载，但是下载有点慢</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>安装就很简单</p>]]></content>
      
      
      <categories>
          
          <category> 安装 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HSV颜色识别且标注</title>
      <link href="2020/05/31/HSV%E9%A2%9C%E8%89%B2%E8%AF%86%E5%88%AB%E4%B8%94%E6%A0%87%E6%B3%A8/"/>
      <url>2020/05/31/HSV%E9%A2%9C%E8%89%B2%E8%AF%86%E5%88%AB%E4%B8%94%E6%A0%87%E6%B3%A8/</url>
      
        <content type="html"><![CDATA[<p><font color="HotPink">色调H</font><br>用角度度量，取值范围为0°～360°，从红色开始按逆时针方向计算，红色为0°，绿色为120°,蓝色为240°。它们的补色是：黄色为60°，青色为180°,品红为300°</p><p><font color="HotPink">饱和度S</font><br>饱和度S表示颜色接近光谱色的程度。一种颜色，可以看成是某种光谱色与白色混合的结果。其中光谱色所占的比例愈大，颜色接近光谱色的程度就愈高，颜色的饱和度也就愈高。饱和度高，颜色则深而艳。光谱色的白光成分为0，饱和度达到最高。通常取值范围为0%～100%，值越大，颜色越饱和</p><p><font color="HotPink">明度V</font><br>明度表示颜色明亮的程度，对于光源色，明度值与发光体的光亮度有关；对于物体色，此值和物体的透射比或反射比有关。通常取值范围为0%（黑）到100%（白）</p><h2 id="HSV表"><a href="#HSV表" class="headerlink" title="HSV表"></a>HSV表</h2><p><img src="/2020/05/31/HSV%E9%A2%9C%E8%89%B2%E8%AF%86%E5%88%AB%E4%B8%94%E6%A0%87%E6%B3%A8/1.png" alt></p><p><font color="DarkOrchid">如果想用的颜色不在HSV表里可以去查想要的颜色色号的rgb值，然后用<code>cv2.cvtcolor()</code>函数将bgr转成hsv<br>例如：</font></p><pre class=" language-Python"><code class="language-Python">color = np.uint8([[[203, 192, 255]]])hsv = cv2.cvtColor(color, cv2.COLOR_BGR2HSV)</code></pre><h2 id="完整代码-视频中"><a href="#完整代码-视频中" class="headerlink" title="完整代码(视频中)"></a>完整代码(视频中)</h2><pre class=" language-Python"><code class="language-Python">import numpy as npimport cv2font = cv2.FONT_HERSHEY_SIMPLEXlower_green = np.array([35, 110, 106])upper_green = np.array([77, 255, 255])cap = cv2.VideoCapture('F:/test/mp4.mp4')if cap.isOpened():    flag = 1else:    flag = 0num = 0if flag:    while True:        ret, frame = cap.read()        if not ret:            break        hsv_img = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)        mask_green = cv2.inRange(hsv_img, lower_green, upper_green)        mask_green = cv2.medianBlur(mask_green, 7)        mask_green, contours, hierarchy = cv2.findContours(mask_green, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)        for cnt in contours:            (x, y, w, h) = cv2.boundingRect(cnt)            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 255), 2)            cv2.putText(frame, "Green", (x, y - 5), font, 0.7, (0, 255, 0), 2)        num = num + 1        cv2.imshow("dection", frame)        cv2.imwrite("imgs/%d.jpg" % num, frame)        if cv2.waitKey(20) & 0xFF == 27:            breakcv2.waitKey(0)cv2.destroyAllWindows()</code></pre>]]></content>
      
      
      <categories>
          
          <category> 视觉 </category>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
